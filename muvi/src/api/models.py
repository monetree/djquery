# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from __future__ import unicode_literals

from django.db import models


class BandwidthLog(models.Model):
    unique_id = models.CharField(max_length=255, blank=True, null=True)
    studio_id = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    old_user_id = models.IntegerField()
    movie_id = models.IntegerField(blank=True, null=True)
    video_id = models.IntegerField(blank=True, null=True)
    resolution = models.CharField(max_length=100, blank=True, null=True)
    start_time = models.FloatField(blank=True, null=True)
    end_time = models.FloatField(blank=True, null=True)
    played_time = models.FloatField(blank=True, null=True)
    buffer_size = models.FloatField(blank=True, null=True)
    ip = models.CharField(max_length=255, blank=True, null=True)
    created_date = models.DateTimeField(blank=True, null=True)
    status = models.IntegerField(blank=True, null=True)
    device_type = models.IntegerField()
    content_type = models.IntegerField()
    device_id = models.CharField(max_length=255, blank=True, null=True)
    city = models.CharField(max_length=100)
    region = models.CharField(max_length=100)
    country = models.CharField(max_length=100)
    country_code = models.CharField(max_length=10)
    continent_code = models.CharField(max_length=10)
    latitude = models.CharField(max_length=30)
    longitude = models.CharField(max_length=30)
    bandwidth_type = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'bandwidth_log'


class ContentRatings(models.Model):
    rating = models.FloatField()
    studio_id = models.IntegerField()
    content_id = models.IntegerField()
    is_episode = models.CharField(max_length=1, blank=True, null=True)
    status = models.CharField(max_length=1, blank=True, null=True)
    review = models.TextField()
    created_date = models.DateTimeField()
    fullname = models.CharField(max_length=255, blank=True, null=True)
    email = models.CharField(max_length=200, blank=True, null=True)
    user_ip = models.CharField(max_length=50, blank=True, null=True)
    user_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'content_ratings'


class Films(models.Model):
    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    uniq_id = models.CharField(max_length=255, blank=True, null=True)
    language = models.CharField(max_length=50, blank=True, null=True)
    rating = models.CharField(max_length=50, blank=True, null=True)
    country = models.CharField(max_length=100, blank=True, null=True)
    genre = models.CharField(max_length=200, blank=True, null=True)
    permalink = models.CharField(max_length=150, blank=True, null=True)
    alias_name = models.CharField(max_length=255, blank=True, null=True)
    story = models.TextField(blank=True, null=True)
    meta_title = models.TextField(blank=True, null=True)
    meta_description = models.TextField(blank=True, null=True)
    meta_keywords = models.TextField(blank=True, null=True)
    content_type_id = models.IntegerField(blank=True, null=True)
    content_types_id = models.IntegerField()
    content_category_value = models.TextField(blank=True, null=True)
    content_subcategory_value = models.TextField(blank=True, null=True)
    parent_content_type_id = models.IntegerField(blank=True, null=True)
    custom_metadata_form_id = models.IntegerField()
    censor_rating = models.CharField(max_length=100, blank=True, null=True)
    release_date = models.DateField(blank=True, null=True)
    tags = models.TextField(blank=True, null=True)
    movie_payment_type = models.CharField(max_length=10, blank=True, null=True)
    is_verified = models.IntegerField(blank=True, null=True)
    is_merged = models.IntegerField(blank=True, null=True)
    studio_id = models.IntegerField(blank=True, null=True)
    ip = models.CharField(max_length=30, blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    created_date = models.DateTimeField(blank=True, null=True)
    last_updated_by = models.IntegerField(blank=True, null=True)
    last_updated_date = models.DateTimeField(blank=True, null=True)
    status = models.CharField(max_length=1)
    ppv_plan_id = models.CharField(max_length=255)
    language_id = models.IntegerField()
    parent_id = models.IntegerField()
    search_parent_id = models.IntegerField()
    custom1 = models.TextField(blank=True, null=True)
    custom2 = models.TextField(blank=True, null=True)
    custom3 = models.TextField(blank=True, null=True)
    custom4 = models.TextField(blank=True, null=True)
    custom5 = models.TextField(blank=True, null=True)
    custom6 = models.TextField(blank=True, null=True)
    custom7 = models.TextField(blank=True, null=True)
    custom8 = models.TextField(blank=True, null=True)
    custom9 = models.TextField(blank=True, null=True)
    custom10 = models.TextField(blank=True, null=True)
    mapped_id = models.IntegerField()
    start_time = models.DateTimeField()
    duration = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'films'


class MovieStreams(models.Model):
    movie_id = models.IntegerField(blank=True, null=True)
    video_quality = models.IntegerField(blank=True, null=True)
    full_movie = models.CharField(max_length=255, blank=True, null=True)
    full_movie_url = models.TextField(blank=True, null=True)
    thirdparty_url = models.CharField(max_length=250)
    studio_id = models.IntegerField(blank=True, null=True)
    sdk_user_id = models.IntegerField()
    review_flag = models.IntegerField()
    episode_number = models.IntegerField(blank=True, null=True)
    episode_title = models.CharField(max_length=255, blank=True, null=True)
    episode_story = models.TextField(blank=True, null=True)
    episode_date = models.DateField(blank=True, null=True)
    is_episode = models.SmallIntegerField()
    series_number = models.IntegerField()
    is_popular = models.SmallIntegerField(blank=True, null=True)
    id_seq = models.IntegerField(blank=True, null=True)
    is_poster = models.SmallIntegerField()
    is_active = models.IntegerField()
    ip = models.CharField(max_length=30, blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    created_date = models.DateTimeField(blank=True, null=True)
    last_updated_by = models.IntegerField(blank=True, null=True)
    last_updated_date = models.DateTimeField(blank=True, null=True)
    wiki_data = models.IntegerField(blank=True, null=True)
    upload_date = models.DateField(blank=True, null=True)
    is_converted = models.IntegerField()
    embed_id = models.CharField(max_length=255, blank=True, null=True)
    has_sh = models.IntegerField()
    is_download_progress = models.IntegerField()
    video_resolution = models.CharField(max_length=50, blank=True, null=True)
    resolution_size = models.TextField(blank=True, null=True)
    enable_ad = models.IntegerField()
    rolltype = models.IntegerField()
    roll_after = models.TextField(blank=True, null=True)
    mail_sent_for_video = models.IntegerField()
    upload_start_time = models.DateTimeField(blank=True, null=True)
    upload_end_time = models.DateTimeField(blank=True, null=True)
    upload_cancel_time = models.DateTimeField(blank=True, null=True)
    encoding_start_time = models.DateTimeField(blank=True, null=True)
    encoding_end_time = models.DateTimeField(blank=True, null=True)
    encode_fail_time = models.DateTimeField(blank=True, null=True)
    content_publish_date = models.DateTimeField(blank=True, null=True)
    original_file = models.CharField(max_length=100, blank=True, null=True)
    converted_file = models.CharField(max_length=100, blank=True, null=True)
    video_duration = models.CharField(max_length=20, blank=True, null=True)
    video_management_id = models.IntegerField()
    encryption_key = models.TextField()
    content_key = models.TextField()
    is_demo = models.CharField(max_length=1)
    episode_parent_id = models.IntegerField()
    episode_language_id = models.IntegerField()
    custom_metadata_form_id = models.IntegerField()
    custom1 = models.TextField(blank=True, null=True)
    custom2 = models.TextField(blank=True, null=True)
    custom3 = models.TextField(blank=True, null=True)
    custom4 = models.TextField(blank=True, null=True)
    custom5 = models.TextField(blank=True, null=True)
    custom6 = models.TextField(blank=True, null=True)
    is_offline = models.IntegerField()
    mapped_stream_id = models.IntegerField()
    has_hls_feed = models.IntegerField()
    is_downloadable = models.IntegerField()
    file_management_id = models.IntegerField()
    after_encoding = models.IntegerField(blank=True, null=True)
    is_mobile_drm_disable = models.IntegerField()
    is_multibitrate_offline = models.IntegerField()
    encoding_time = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'movie_streams'


class SdkUsers(models.Model):
    email = models.CharField(max_length=255, blank=True, null=True)
    studio_id = models.IntegerField(blank=True, null=True)
    encrypted_password = models.CharField(max_length=255, blank=True, null=True)
    password_salt = models.CharField(max_length=255, blank=True, null=True)
    reset_password_token = models.CharField(max_length=255, blank=True, null=True)
    remember_token = models.CharField(max_length=255, blank=True, null=True)
    remember_created_at = models.DateTimeField(blank=True, null=True)
    oauth2_uid = models.BigIntegerField(blank=True, null=True)
    oauth2_token = models.CharField(max_length=149, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    display_name = models.CharField(max_length=255, blank=True, null=True)
    nick_name = models.CharField(max_length=255, blank=True, null=True)
    mobile_number = models.CharField(max_length=20, blank=True, null=True)
    is_broadcaster = models.IntegerField()
    is_admin = models.IntegerField(blank=True, null=True)
    confirmation_token = models.CharField(max_length=255, blank=True, null=True)
    confirmed_at = models.DateTimeField(blank=True, null=True)
    confirmation_sent_at = models.DateTimeField(blank=True, null=True)
    is_approved = models.IntegerField(blank=True, null=True)
    facebook_id = models.BigIntegerField(blank=True, null=True)
    twitter_id = models.BigIntegerField(blank=True, null=True)
    gender = models.CharField(max_length=10, blank=True, null=True)
    language = models.TextField(blank=True, null=True)
    authentication_token = models.CharField(max_length=255, blank=True, null=True)
    subscribe_notification = models.IntegerField(blank=True, null=True)
    subscribe_newsletter = models.IntegerField(blank=True, null=True)
    is_studio_admin = models.CharField(max_length=1, blank=True, null=True)
    token = models.TextField(blank=True, null=True)
    registered_from = models.CharField(max_length=200, blank=True, null=True)
    source = models.CharField(max_length=200, blank=True, null=True)
    signup_ip = models.CharField(max_length=200, blank=True, null=True)
    signup_location_org = models.TextField()
    is_developer = models.CharField(max_length=1, blank=True, null=True)
    ip = models.CharField(max_length=30, blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    created_date = models.DateTimeField(blank=True, null=True)
    last_updated_by = models.IntegerField(blank=True, null=True)
    last_updated_date = models.DateTimeField(blank=True, null=True)
    status = models.IntegerField()
    add_video_log = models.IntegerField()
    profile_image_file_name = models.CharField(max_length=255, blank=True, null=True)
    is_deleted = models.CharField(max_length=1)
    deleted_at = models.DateTimeField()
    deleted_by = models.IntegerField()
    will_cancel_on = models.DateTimeField()
    fb_userid = models.CharField(max_length=255, blank=True, null=True)
    fb_access_token = models.TextField(blank=True, null=True)
    gplus_userid = models.TextField(blank=True, null=True)
    openid_userid = models.CharField(max_length=255)
    is_free = models.IntegerField()
    user_language = models.CharField(max_length=50)
    announcement_subscribe = models.CharField(max_length=1)
    announcement_subscribe_time = models.DateTimeField()
    out_source_user_id = models.TextField(blank=True, null=True)
    is_subscribe_inapi = models.IntegerField()
    api_unique_id = models.CharField(max_length=50)
    signup_location = models.TextField()
    verified_user = models.IntegerField()
    enable_notification = models.IntegerField()
    last_update_from_ip = models.CharField(max_length=255)
    new_privacy_policy_update = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'sdk_users'


class SubscriptionPricing(models.Model):
    subscription_plan_id = models.IntegerField()
    currency_id = models.IntegerField()
    price = models.FloatField()
    status = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'subscription_pricing'


class Transactions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user_id = models.IntegerField(blank=True, null=True)
    old_user_id = models.IntegerField()
    studio_id = models.IntegerField(blank=True, null=True)
    plan_id = models.IntegerField(blank=True, null=True)
    currency_id = models.IntegerField()
    transaction_date = models.DateTimeField()
    payment_method = models.CharField(max_length=40, blank=True, null=True)
    transaction_status = models.CharField(max_length=40, blank=True, null=True)
    transaction_status_reason = models.CharField(max_length=255, blank=True, null=True)
    invoice_id = models.CharField(max_length=40, blank=True, null=True)
    order_number = models.CharField(max_length=40, blank=True, null=True)
    dollar_amount = models.FloatField()
    amount = models.FloatField(blank=True, null=True)
    bill_amount = models.FloatField(blank=True, null=True)
    fullname = models.CharField(max_length=255, blank=True, null=True)
    address1 = models.CharField(max_length=255, blank=True, null=True)
    address2 = models.CharField(max_length=255, blank=True, null=True)
    city = models.CharField(max_length=255, blank=True, null=True)
    state = models.CharField(max_length=80, blank=True, null=True)
    phone = models.CharField(max_length=40, blank=True, null=True)
    country = models.CharField(max_length=100, blank=True, null=True)
    zip = models.CharField(max_length=20, blank=True, null=True)
    payer_id = models.CharField(max_length=100, blank=True, null=True)
    subscription_id = models.IntegerField(blank=True, null=True)
    subscriptionbundles_id = models.IntegerField()
    ppv_subscription_id = models.IntegerField()
    ipn_track_id = models.CharField(max_length=100, blank=True, null=True)
    user_reference = models.CharField(max_length=50, blank=True, null=True)
    movie_id = models.IntegerField(blank=True, null=True)
    expiry_date = models.DateTimeField(blank=True, null=True)
    ip = models.CharField(max_length=30, blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    created_date = models.DateTimeField(blank=True, null=True)
    last_updated_by = models.IntegerField(blank=True, null=True)
    last_updated_date = models.DateTimeField(blank=True, null=True)
    transaction_type = models.IntegerField()
    adyen_transaction_mode = models.IntegerField()
    response_text = models.TextField(blank=True, null=True)
    is_carrier_billing = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'transactions'


class User(models.Model):
    email = models.CharField(max_length=255, blank=True, null=True)
    encrypted_password = models.CharField(max_length=255, blank=True, null=True)
    is_admin = models.IntegerField()
    first_name = models.CharField(max_length=255, blank=True, null=True)
    last_name = models.CharField(max_length=255, blank=True, null=True)
    logo = models.TextField(blank=True, null=True)
    studio_license = models.TextField(blank=True, null=True)
    address_1 = models.TextField(blank=True, null=True)
    address_2 = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=255, blank=True, null=True)
    state = models.CharField(max_length=255, blank=True, null=True)
    zip = models.CharField(max_length=255, blank=True, null=True)
    phone_no = models.CharField(max_length=255, blank=True, null=True)
    country = models.CharField(max_length=255, blank=True, null=True)
    company = models.CharField(max_length=255, blank=True, null=True)
    type_of_company = models.CharField(max_length=255, blank=True, null=True)
    reset_password_token = models.CharField(max_length=255, blank=True, null=True)
    reset_password_sent_at = models.CharField(max_length=255, blank=True, null=True)
    remember_created_at = models.DateTimeField(blank=True, null=True)
    sign_in_count = models.IntegerField(blank=True, null=True)
    current_sign_in_at = models.CharField(max_length=255, blank=True, null=True)
    last_sign_in_at = models.DateTimeField(blank=True, null=True)
    current_sign_in_ip = models.DateTimeField(blank=True, null=True)
    last_sign_in_ip = models.CharField(max_length=50, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    is_active = models.IntegerField(blank=True, null=True)
    approved = models.IntegerField(blank=True, null=True)
    password_salt = models.CharField(max_length=255, blank=True, null=True)
    remember_token = models.CharField(max_length=255, blank=True, null=True)
    last_update = models.DateTimeField(blank=True, null=True)
    is_sdk = models.IntegerField()
    studio_id = models.IntegerField()
    role_id = models.IntegerField()
    permission_id = models.TextField(blank=True, null=True)
    signup_step = models.IntegerField()
    signup_ip = models.CharField(max_length=50, blank=True, null=True)
    signup_location_org = models.TextField()
    reference = models.CharField(max_length=50, blank=True, null=True)
    is_email_verified = models.IntegerField()
    is_login_allowed = models.IntegerField()
    is_email_send = models.IntegerField()
    signup_location = models.TextField()
    two_factor_authentication = models.IntegerField()
    otp = models.IntegerField()
    otp_expired_time = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'user'


class UserSubscriptions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user_id = models.IntegerField(blank=True, null=True)
    studio_id = models.IntegerField(blank=True, null=True)
    plan_id = models.IntegerField(blank=True, null=True)
    outsource_plan_id = models.CharField(max_length=250, blank=True, null=True)
    card_id = models.IntegerField(blank=True, null=True)
    studio_payment_gateway_id = models.IntegerField(blank=True, null=True)
    currency_id = models.IntegerField()
    amount = models.FloatField(blank=True, null=True)
    discount_amount = models.FloatField()
    payment_key = models.CharField(max_length=255, blank=True, null=True)
    start_date = models.DateTimeField(blank=True, null=True)
    end_date = models.DateTimeField(blank=True, null=True)
    payment_status = models.IntegerField()
    partial_failed_date = models.DateTimeField(blank=True, null=True)
    partial_failed_due = models.FloatField()
    status = models.IntegerField()
    is_success = models.IntegerField()
    coupon_code = models.CharField(max_length=255)
    use_discount = models.IntegerField()
    is_renewal = models.IntegerField()
    payment_number = models.IntegerField()
    count_discount = models.IntegerField()
    is_3rd_party_coupon = models.IntegerField()
    cancel_date = models.DateTimeField(blank=True, null=True)
    profile_id = models.CharField(max_length=40, blank=True, null=True)
    cancel_reason_id = models.IntegerField(blank=True, null=True)
    cancel_note = models.TextField(blank=True, null=True)
    canceled_by = models.IntegerField()
    ip = models.CharField(max_length=30, blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True)
    created_date = models.DateTimeField(blank=True, null=True)
    last_updated_by = models.IntegerField(blank=True, null=True)
    last_updated_date = models.DateTimeField(blank=True, null=True)
    is_subscription_bundle = models.IntegerField()
    device_type = models.IntegerField()
    is_carrier_billing = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_subscriptions'


class VideoLogs(models.Model):
    movie_id = models.IntegerField(blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)
    old_user_id = models.IntegerField()
    studio_id = models.IntegerField(blank=True, null=True)
    video_type = models.CharField(max_length=1, blank=True, null=True)
    watch_status = models.CharField(max_length=30, blank=True, null=True)
    episode_id = models.IntegerField(blank=True, null=True)
    ip = models.CharField(max_length=30, blank=True, null=True)
    created_date = models.DateTimeField(blank=True, null=True)
    video_id = models.IntegerField()
    trailer_id = models.IntegerField(blank=True, null=True)
    video_length = models.FloatField()
    played_length = models.FloatField()
    played_percent = models.IntegerField()
    updated_date = models.DateTimeField()
    buffered = models.FloatField()
    device_type = models.IntegerField()
    content_type = models.IntegerField()
    device_id = models.CharField(max_length=255, blank=True, null=True)
    resume_time = models.FloatField(blank=True, null=True)
    played_from = models.IntegerField()
    is_watch_durationenabled = models.IntegerField()
    isclear_watchhistory = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'video_logs'
